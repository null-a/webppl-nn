var sampleClassifierNet = function() {
  return stack([
    function(x) { T.get(x, 0); }, // Extract scalar output from vector.
    sigmoid, // Squish to [0,1], representing class probability of input.
    linear('net1', {in: 1, out: 1, param: modelParamL2(1)}), // L2 prior on parameters.
    function(x) { Vector([x]); } // Map input from scalar to vector.
  ]);
};

// Here we create a function that runs the net, using the (possibly
// optimized) guide parameters.
var optClassifierNet = usingGuide(function(x) {
  return sampleClassifierNet()(x);
});

var data = [
  {x: -2, label: false},
  {x: -3, label: false},
  {x: -2, label: false},
  {x: 1, label: true},
  {x: 2, label: true},
  {x: 1.5, label: true},
  {x: 2.5, label: true}];

var model = function() {
  var classifierNet = sampleClassifierNet();
  mapData({data}, function(datum) {
    var p = classifierNet(datum.x);
    observe(Bernoulli({p}), datum.label);
  });
};

Optimize({
  model,
  steps: 1000,
  optMethod: {adam: {stepSize: .1}}});

// Inspect the optimized function by passing some values through it.
map(function(x) {
  return {x, prob: optClassifierNet(x)};
}, _.range(-3, 4));

// Suggestion: Try changing the strength of the prior on the network
// parameters.
